

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Wed Sep 27 21:49:24 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.43
    21                           ; Generated 25/07/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0043                     _RD3	set	67
   115  0042                     _RD2	set	66
   116  0047                     _RD7	set	71
   117  0046                     _RD6	set	70
   118  0045                     _RD5	set	69
   119  0044                     _RD4	set	68
   120  0088                     _TRISD	set	136
   121                           
   122                           	psect	strings
   123  0003                     __pstrings:	
   124  0003                     stringtab:	
   125  0003                     __stringtab:	
   126  0003                     stringcode:	
   127                           ;	String table - string pointers are 1 byte each
   128                           
   129  0003                     stringdir:	
   130  0003  3000               	movlw	high stringdir
   131  0004  008A               	movwf	10
   132  0005  0804               	movf	4,w
   133  0006  0A84               	incf	4,f
   134  0007  0782               	addwf	2,f
   135  0008                     __stringbase:	
   136  0008  3400               	retlw	0
   137  0009                     __end_of__stringtab:	
   138  0009                     STR_2:	
   139  0009  3463               	retlw	99	;'c'
   140  000A  346F               	retlw	111	;'o'
   141  000B  346E               	retlw	110	;'n'
   142  000C  3474               	retlw	116	;'t'
   143  000D  3461               	retlw	97	;'a'
   144  000E  3472               	retlw	114	;'r'
   145  000F  3465               	retlw	101	;'e'
   146  0010  3420               	retlw	32	;' '
   147  0011  3473               	retlw	115	;'s'
   148  0012  3475               	retlw	117	;'u'
   149  0013  3420               	retlw	32	;' '
   150  0014  3464               	retlw	100	;'d'
   151  0015  3469               	retlw	105	;'i'
   152  0016  3420               	retlw	32	;' '
   153  0017  346D               	retlw	109	;'m'
   154  0018  3465               	retlw	101	;'e'
   155  0019  3400               	retlw	0
   156  001A                     STR_5:	
   157  001A  343A               	retlw	58	;':'
   158  001B  3433               	retlw	51	;'3'
   159  001C  3420               	retlw	32	;' '
   160  001D  343C               	retlw	60	;'<'
   161  001E  3433               	retlw	51	;'3'
   162  001F  3420               	retlw	32	;' '
   163  0020  3454               	retlw	84	;'T'
   164  0021  3469               	retlw	105	;'i'
   165  0022  3420               	retlw	32	;' '
   166  0023  3441               	retlw	65	;'A'
   167  0024  346D               	retlw	109	;'m'
   168  0025  346F               	retlw	111	;'o'
   169  0026  3420               	retlw	32	;' '
   170  0027  343C               	retlw	60	;'<'
   171  0028  3433               	retlw	51	;'3'
   172  0029  3400               	retlw	0
   173  002A                     STR_3:	
   174  002A  3444               	retlw	68	;'D'
   175  002B  3461               	retlw	97	;'a'
   176  002C  3472               	retlw	114	;'r'
   177  002D  346C               	retlw	108	;'l'
   178  002E  3461               	retlw	97	;'a'
   179  002F  3420               	retlw	32	;' '
   180  0030  3426               	retlw	38	;'&'
   181  0031  3420               	retlw	32	;' '
   182  0032  3441               	retlw	65	;'A'
   183  0033  346C               	retlw	108	;'l'
   184  0034  3466               	retlw	102	;'f'
   185  0035  3461               	retlw	97	;'a'
   186  0036  346C               	retlw	108	;'l'
   187  0037  3466               	retlw	102	;'f'
   188  0038  3461               	retlw	97	;'a'
   189  0039  3400               	retlw	0
   190  003A                     STR_1:	
   191  003A  344C               	retlw	76	;'L'
   192  003B  3465               	retlw	101	;'e'
   193  003C  3469               	retlw	105	;'i'
   194  003D  3420               	retlw	32	;' '
   195  003E  3473               	retlw	115	;'s'
   196  003F  3461               	retlw	97	;'a'
   197  0040  3420               	retlw	32	;' '
   198  0041  3463               	retlw	99	;'c'
   199  0042  3468               	retlw	104	;'h'
   200  0043  3465               	retlw	101	;'e'
   201  0044  3420               	retlw	32	;' '
   202  0045  3470               	retlw	112	;'p'
   203  0046  3475               	retlw	117	;'u'
   204  0047  346F               	retlw	111	;'o'
   205  0048  3400               	retlw	0
   206  0027                     
   207                           ; #config settings
   208  0000                     
   209                           	psect	cinit
   210  07FC                     start_initialization:	
   211  07FC                     __initialization:	
   212  07FC                     end_of_initialization:	
   213                           ;End of C runtime variable initialization code
   214                           
   215  07FC                     __end_of__initialization:	
   216  07FC  0183               	clrf	3
   217  07FD  120A  118A  2F02   	ljmp	_main	;jump to C main() function
   218                           
   219                           	psect	cstackCOMMON
   220  0070                     __pcstackCOMMON:	
   221  0070                     ?_Lcd_Port:	
   222  0070                     ??_Lcd_Port:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ?_Lcd_Cmd:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_Lcd_Init:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_Lcd_Write_Char:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?_Lcd_Write_String:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_Lcd_Shift_Right:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ?_Lcd_Shift_Left:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_Lcd_Clear:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_main:	
   247                           ; 2 bytes @ 0x0
   248                           
   249  0070                     Lcd_Port@a:	
   250                           ; 2 bytes @ 0x0
   251                           
   252                           
   253                           ; 1 bytes @ 0x0
   254  0070                     	ds	1
   255  0071                     ??_Lcd_Cmd:	
   256  0071                     ??_Lcd_Write_Char:	
   257                           ; 1 bytes @ 0x1
   258                           
   259                           
   260                           ; 1 bytes @ 0x1
   261  0071                     	ds	1
   262  0072                     Lcd_Write_Char@temp:	
   263                           
   264                           ; 1 bytes @ 0x2
   265  0072                     	ds	1
   266  0073                     Lcd_Cmd@a:	
   267  0073                     Lcd_Write_Char@y:	
   268                           ; 1 bytes @ 0x3
   269                           
   270                           
   271                           ; 1 bytes @ 0x3
   272  0073                     	ds	1
   273  0074                     ??_Lcd_Clear:	
   274  0074                     ?_Lcd_Set_Cursor:	
   275                           ; 1 bytes @ 0x4
   276                           
   277  0074                     ??_Lcd_Init:	
   278                           ; 1 bytes @ 0x4
   279                           
   280  0074                     ??_Lcd_Shift_Right:	
   281                           ; 1 bytes @ 0x4
   282                           
   283  0074                     ??_Lcd_Shift_Left:	
   284                           ; 1 bytes @ 0x4
   285                           
   286  0074                     Lcd_Set_Cursor@b:	
   287                           ; 1 bytes @ 0x4
   288                           
   289  0074                     Lcd_Write_Char@a:	
   290                           ; 1 bytes @ 0x4
   291                           
   292                           
   293                           ; 1 bytes @ 0x4
   294  0074                     	ds	1
   295  0075                     ??_Lcd_Set_Cursor:	
   296  0075                     ??_Lcd_Write_String:	
   297                           ; 1 bytes @ 0x5
   298                           
   299  0075                     Lcd_Write_String@i:	
   300                           ; 1 bytes @ 0x5
   301                           
   302                           
   303                           ; 2 bytes @ 0x5
   304  0075                     	ds	2
   305  0077                     Lcd_Set_Cursor@a:	
   306  0077                     Lcd_Write_String@a:	
   307                           ; 1 bytes @ 0x7
   308                           
   309                           
   310                           ; 1 bytes @ 0x7
   311  0077                     	ds	1
   312  0078                     Lcd_Set_Cursor@z:	
   313                           
   314                           ; 1 bytes @ 0x8
   315  0078                     	ds	1
   316  0079                     Lcd_Set_Cursor@y:	
   317                           
   318                           ; 1 bytes @ 0x9
   319  0079                     	ds	1
   320  007A                     Lcd_Set_Cursor@temp:	
   321                           
   322                           ; 1 bytes @ 0xA
   323  007A                     	ds	1
   324  007B                     ??_main:	
   325                           
   326                           ; 1 bytes @ 0xB
   327  007B                     	ds	3
   328                           
   329                           	psect	cstackBANK0
   330  0020                     __pcstackBANK0:	
   331  0020                     main@a:	
   332                           
   333                           ; 2 bytes @ 0x0
   334  0020                     	ds	2
   335                           
   336                           	psect	maintext
   337  0702                     __pmaintext:	
   338 ;;
   339 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   340 ;;
   341 ;; *************** function _main *****************
   342 ;; Defined at:
   343 ;;		line 24 in file "main.c"
   344 ;; Parameters:    Size  Location     Type
   345 ;;		None
   346 ;; Auto vars:     Size  Location     Type
   347 ;;  a               2    0[BANK0 ] unsigned int 
   348 ;; Return value:  Size  Location     Type
   349 ;;                  2   61[None  ] int 
   350 ;; Registers used:
   351 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   352 ;; Tracked objects:
   353 ;;		On entry : B00/0
   354 ;;		On exit  : 0/0
   355 ;;		Unchanged: 0/0
   356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   357 ;;      Params:         0       0       0       0       0
   358 ;;      Locals:         0       2       0       0       0
   359 ;;      Temps:          3       0       0       0       0
   360 ;;      Totals:         3       2       0       0       0
   361 ;;Total ram usage:        5 bytes
   362 ;; Hardware stack levels required when called:    3
   363 ;; This function calls:
   364 ;;		_Lcd_Clear
   365 ;;		_Lcd_Init
   366 ;;		_Lcd_Set_Cursor
   367 ;;		_Lcd_Shift_Left
   368 ;;		_Lcd_Shift_Right
   369 ;;		_Lcd_Write_Char
   370 ;;		_Lcd_Write_String
   371 ;; This function is called by:
   372 ;;		Startup code after reset
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376                           
   377                           ;psect for function _main
   378  0702                     _main:	
   379                           
   380                           ;main.c: 26: unsigned int a;
   381                           ;main.c: 27: TRISD = 0x00;
   382                           
   383                           ;incstack = 0
   384                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   385  0702  1683               	bsf	3,5	;RP0=1, select bank1
   386  0703  1303               	bcf	3,6	;RP1=0, select bank1
   387  0704  0188               	clrf	8	;volatile
   388                           
   389                           ;main.c: 28: Lcd_Init();
   390  0705  120A  118A  26A7  120A  118A  	fcall	_Lcd_Init
   391  070A                     l767:	
   392                           ;main.c: 29: while(1)
   393                           
   394                           
   395                           ;main.c: 30: {
   396                           ;main.c: 31: Lcd_Clear();
   397  070A  120A  118A  25AD  120A  118A  	fcall	_Lcd_Clear
   398                           
   399                           ;main.c: 32: Lcd_Set_Cursor(1,1);
   400  070F  01F4               	clrf	Lcd_Set_Cursor@b
   401  0710  0AF4               	incf	Lcd_Set_Cursor@b,f
   402  0711  3001               	movlw	1
   403  0712  120A  118A  265D  120A  118A  	fcall	_Lcd_Set_Cursor
   404                           
   405                           ;main.c: 33: Lcd_Write_String("Lei sa che puo");
   406  0717  3032               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   407  0718  120A  118A  2602  120A  118A  	fcall	_Lcd_Write_String
   408                           
   409                           ;main.c: 34: Lcd_Set_Cursor(2,1);
   410  071D  01F4               	clrf	Lcd_Set_Cursor@b
   411  071E  0AF4               	incf	Lcd_Set_Cursor@b,f
   412  071F  3002               	movlw	2
   413  0720  120A  118A  265D  120A  118A  	fcall	_Lcd_Set_Cursor
   414                           
   415                           ;main.c: 35: Lcd_Write_String("contare su di me");
   416  0725  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   417  0726  120A  118A  2602  120A  118A  	fcall	_Lcd_Write_String
   418                           
   419                           ;main.c: 36: _delay((unsigned long)((2000)*(8000000/4000.0)));
   420  072B  3015               	movlw	21
   421  072C  00FD               	movwf	??_main+2
   422  072D  304B               	movlw	75
   423  072E  00FC               	movwf	??_main+1
   424  072F  30BE               	movlw	190
   425  0730  00FB               	movwf	??_main
   426  0731                     u297:	
   427  0731  0BFB               	decfsz	??_main,f
   428  0732  2F31               	goto	u297
   429  0733  0BFC               	decfsz	??_main+1,f
   430  0734  2F31               	goto	u297
   431  0735  0BFD               	decfsz	??_main+2,f
   432  0736  2F31               	goto	u297
   433  0737  0000               	nop
   434                           
   435                           ;main.c: 37: Lcd_Clear();
   436  0738  120A  118A  25AD  120A  118A  	fcall	_Lcd_Clear
   437                           
   438                           ;main.c: 38: Lcd_Set_Cursor(1,1);
   439  073D  01F4               	clrf	Lcd_Set_Cursor@b
   440  073E  0AF4               	incf	Lcd_Set_Cursor@b,f
   441  073F  3001               	movlw	1
   442  0740  120A  118A  265D  120A  118A  	fcall	_Lcd_Set_Cursor
   443                           
   444                           ;main.c: 39: Lcd_Write_String("Darla & Alfalfa");
   445  0745  3022               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   446  0746  120A  118A  2602  120A  118A  	fcall	_Lcd_Write_String
   447                           
   448                           ;main.c: 40: Lcd_Set_Cursor(2,1);
   449  074B  01F4               	clrf	Lcd_Set_Cursor@b
   450  074C  0AF4               	incf	Lcd_Set_Cursor@b,f
   451  074D  3002               	movlw	2
   452  074E  120A  118A  265D  120A  118A  	fcall	_Lcd_Set_Cursor
   453                           
   454                           ;main.c: 41: Lcd_Write_String("<3");
   455  0753  301F               	movlw	(low (((STR_5+13)-__stringbase)| (0+32768)))& (0+255)
   456  0754  120A  118A  2602  120A  118A  	fcall	_Lcd_Write_String
   457                           
   458                           ;main.c: 42: _delay((unsigned long)((2000)*(8000000/4000.0)));
   459  0759  3015               	movlw	21
   460  075A  00FD               	movwf	??_main+2
   461  075B  304B               	movlw	75
   462  075C  00FC               	movwf	??_main+1
   463  075D  30BE               	movlw	190
   464  075E  00FB               	movwf	??_main
   465  075F                     u307:	
   466  075F  0BFB               	decfsz	??_main,f
   467  0760  2F5F               	goto	u307
   468  0761  0BFC               	decfsz	??_main+1,f
   469  0762  2F5F               	goto	u307
   470  0763  0BFD               	decfsz	??_main+2,f
   471  0764  2F5F               	goto	u307
   472  0765  0000               	nop
   473                           
   474                           ;main.c: 43: Lcd_Clear();
   475  0766  120A  118A  25AD  120A  118A  	fcall	_Lcd_Clear
   476                           
   477                           ;main.c: 44: Lcd_Set_Cursor(1,1);
   478  076B  01F4               	clrf	Lcd_Set_Cursor@b
   479  076C  0AF4               	incf	Lcd_Set_Cursor@b,f
   480  076D  3001               	movlw	1
   481  076E  120A  118A  265D  120A  118A  	fcall	_Lcd_Set_Cursor
   482                           
   483                           ;main.c: 45: Lcd_Write_String(":3 <3 Ti Amo <3");
   484  0773  3012               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   485  0774  120A  118A  2602  120A  118A  	fcall	_Lcd_Write_String
   486                           
   487                           ;main.c: 47: for(a=0;a<15;a++)
   488  0779  1283               	bcf	3,5	;RP0=0, select bank0
   489  077A  1303               	bcf	3,6	;RP1=0, select bank0
   490  077B  01A0               	clrf	main@a
   491  077C  01A1               	clrf	main@a+1
   492  077D  3000               	movlw	0
   493  077E  0221               	subwf	main@a+1,w
   494  077F  300F               	movlw	15
   495  0780  1903               	skipnz
   496  0781  0220               	subwf	main@a,w
   497  0782  1803               	btfsc	3,0
   498  0783  2FA5               	goto	l811
   499  0784                     l803:	
   500                           
   501                           ;main.c: 48: {
   502                           ;main.c: 49: _delay((unsigned long)((300)*(8000000/4000.0)));
   503  0784  3004               	movlw	4
   504  0785  00FD               	movwf	??_main+2
   505  0786  300C               	movlw	12
   506  0787  00FC               	movwf	??_main+1
   507  0788  3033               	movlw	51
   508  0789  00FB               	movwf	??_main
   509  078A                     u317:	
   510  078A  0BFB               	decfsz	??_main,f
   511  078B  2F8A               	goto	u317
   512  078C  0BFC               	decfsz	??_main+1,f
   513  078D  2F8A               	goto	u317
   514  078E  0BFD               	decfsz	??_main+2,f
   515  078F  2F8A               	goto	u317
   516  0790  2F91               	nop2
   517                           
   518                           ;main.c: 50: Lcd_Shift_Left();
   519  0791  120A  118A  25B8  120A  118A  	fcall	_Lcd_Shift_Left
   520  0796  3001               	movlw	1
   521  0797  1283               	bcf	3,5	;RP0=0, select bank0
   522  0798  1303               	bcf	3,6	;RP1=0, select bank0
   523  0799  07A0               	addwf	main@a,f
   524  079A  1803               	skipnc
   525  079B  0AA1               	incf	main@a+1,f
   526  079C  3000               	movlw	0
   527  079D  07A1               	addwf	main@a+1,f
   528  079E  3000               	movlw	0
   529  079F  0221               	subwf	main@a+1,w
   530  07A0  300F               	movlw	15
   531  07A1  1903               	skipnz
   532  07A2  0220               	subwf	main@a,w
   533  07A3  1C03               	skipc
   534  07A4  2F84               	goto	l803
   535  07A5                     l811:	
   536                           
   537                           ;main.c: 51: }
   538                           ;main.c: 53: for(a=0;a<15;a++)
   539  07A5  01A0               	clrf	main@a
   540  07A6  01A1               	clrf	main@a+1
   541  07A7  3000               	movlw	0
   542  07A8  0221               	subwf	main@a+1,w
   543  07A9  300F               	movlw	15
   544  07AA  1903               	skipnz
   545  07AB  0220               	subwf	main@a,w
   546  07AC  1803               	btfsc	3,0
   547  07AD  2FCF               	goto	l825
   548  07AE                     l817:	
   549                           
   550                           ;main.c: 54: {
   551                           ;main.c: 55: _delay((unsigned long)((300)*(8000000/4000.0)));
   552  07AE  3004               	movlw	4
   553  07AF  00FD               	movwf	??_main+2
   554  07B0  300C               	movlw	12
   555  07B1  00FC               	movwf	??_main+1
   556  07B2  3033               	movlw	51
   557  07B3  00FB               	movwf	??_main
   558  07B4                     u327:	
   559  07B4  0BFB               	decfsz	??_main,f
   560  07B5  2FB4               	goto	u327
   561  07B6  0BFC               	decfsz	??_main+1,f
   562  07B7  2FB4               	goto	u327
   563  07B8  0BFD               	decfsz	??_main+2,f
   564  07B9  2FB4               	goto	u327
   565  07BA  2FBB               	nop2
   566                           
   567                           ;main.c: 56: Lcd_Shift_Right();
   568  07BB  120A  118A  25C3  120A  118A  	fcall	_Lcd_Shift_Right
   569  07C0  3001               	movlw	1
   570  07C1  1283               	bcf	3,5	;RP0=0, select bank0
   571  07C2  1303               	bcf	3,6	;RP1=0, select bank0
   572  07C3  07A0               	addwf	main@a,f
   573  07C4  1803               	skipnc
   574  07C5  0AA1               	incf	main@a+1,f
   575  07C6  3000               	movlw	0
   576  07C7  07A1               	addwf	main@a+1,f
   577  07C8  3000               	movlw	0
   578  07C9  0221               	subwf	main@a+1,w
   579  07CA  300F               	movlw	15
   580  07CB  1903               	skipnz
   581  07CC  0220               	subwf	main@a,w
   582  07CD  1C03               	skipc
   583  07CE  2FAE               	goto	l817
   584  07CF                     l825:	
   585                           
   586                           ;main.c: 57: }
   587                           ;main.c: 59: Lcd_Clear();
   588  07CF  120A  118A  25AD  120A  118A  	fcall	_Lcd_Clear
   589                           
   590                           ;main.c: 60: Lcd_Set_Cursor(2,1);
   591  07D4  01F4               	clrf	Lcd_Set_Cursor@b
   592  07D5  0AF4               	incf	Lcd_Set_Cursor@b,f
   593  07D6  3002               	movlw	2
   594  07D7  120A  118A  265D  120A  118A  	fcall	_Lcd_Set_Cursor
   595                           
   596                           ;main.c: 61: Lcd_Write_Char('A');
   597  07DC  3041               	movlw	65
   598  07DD  120A  118A  2624  120A  118A  	fcall	_Lcd_Write_Char
   599                           
   600                           ;main.c: 62: Lcd_Write_Char('&');
   601  07E2  3026               	movlw	38
   602  07E3  120A  118A  2624  120A  118A  	fcall	_Lcd_Write_Char
   603                           
   604                           ;main.c: 63: Lcd_Write_Char('A');
   605  07E8  3041               	movlw	65
   606  07E9  120A  118A  2624  120A  118A  	fcall	_Lcd_Write_Char
   607                           
   608                           ;main.c: 64: _delay((unsigned long)((2000)*(8000000/4000.0)));
   609  07EE  3015               	movlw	21
   610  07EF  00FD               	movwf	??_main+2
   611  07F0  304B               	movlw	75
   612  07F1  00FC               	movwf	??_main+1
   613  07F2  30BE               	movlw	190
   614  07F3  00FB               	movwf	??_main
   615  07F4                     u337:	
   616  07F4  0BFB               	decfsz	??_main,f
   617  07F5  2FF4               	goto	u337
   618  07F6  0BFC               	decfsz	??_main+1,f
   619  07F7  2FF4               	goto	u337
   620  07F8  0BFD               	decfsz	??_main+2,f
   621  07F9  2FF4               	goto	u337
   622  07FA  0000               	nop
   623  07FB  2F0A               	goto	l767
   624  07FC                     __end_of_main:	
   625                           ;main.c: 65: }
   626                           ;main.c: 66: return 0;
   627                           ;	Return value of _main is never used
   628                           
   629                           
   630                           	psect	text1
   631  0602                     __ptext1:	
   632 ;; *************** function _Lcd_Write_String *****************
   633 ;; Defined at:
   634 ;;		line 97 in file "lcd.h"
   635 ;; Parameters:    Size  Location     Type
   636 ;;  a               1    wreg     PTR unsigned char 
   637 ;;		 -> STR_5(16), STR_4(3), STR_3(16), STR_2(17), 
   638 ;;		 -> STR_1(15), 
   639 ;; Auto vars:     Size  Location     Type
   640 ;;  a               1    7[COMMON] PTR unsigned char 
   641 ;;		 -> STR_5(16), STR_4(3), STR_3(16), STR_2(17), 
   642 ;;		 -> STR_1(15), 
   643 ;;  i               2    5[COMMON] int 
   644 ;; Return value:  Size  Location     Type
   645 ;;                  1    wreg      void 
   646 ;; Registers used:
   647 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   648 ;; Tracked objects:
   649 ;;		On entry : 0/0
   650 ;;		On exit  : 0/0
   651 ;;		Unchanged: 0/0
   652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   653 ;;      Params:         0       0       0       0       0
   654 ;;      Locals:         3       0       0       0       0
   655 ;;      Temps:          0       0       0       0       0
   656 ;;      Totals:         3       0       0       0       0
   657 ;;Total ram usage:        3 bytes
   658 ;; Hardware stack levels used:    1
   659 ;; Hardware stack levels required when called:    2
   660 ;; This function calls:
   661 ;;		_Lcd_Write_Char
   662 ;; This function is called by:
   663 ;;		_main
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           
   668                           ;psect for function _Lcd_Write_String
   669  0602                     _Lcd_Write_String:	
   670                           
   671                           ;incstack = 0
   672                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   673                           ;Lcd_Write_String@a stored from wreg
   674  0602  00F7               	movwf	Lcd_Write_String@a
   675                           
   676                           ;lcd.h: 99: int i;
   677                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
   678  0603  01F5               	clrf	Lcd_Write_String@i
   679  0604  01F6               	clrf	Lcd_Write_String@i+1
   680  0605                     l757:	
   681  0605  0875               	movf	Lcd_Write_String@i,w
   682  0606  0777               	addwf	Lcd_Write_String@a,w
   683  0607  0084               	movwf	4
   684  0608  120A  118A  2003  120A  118A  	fcall	stringdir
   685  060D  3A00               	xorlw	0
   686  060E  1903               	btfsc	3,2
   687  060F  0008               	return
   688                           
   689                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
   690  0610  0875               	movf	Lcd_Write_String@i,w
   691  0611  0777               	addwf	Lcd_Write_String@a,w
   692  0612  0084               	movwf	4
   693  0613  120A  118A  2003  120A  118A  	fcall	stringdir
   694  0618  120A  118A  2624  120A  118A  	fcall	_Lcd_Write_Char
   695  061D  3001               	movlw	1
   696  061E  07F5               	addwf	Lcd_Write_String@i,f
   697  061F  1803               	skipnc
   698  0620  0AF6               	incf	Lcd_Write_String@i+1,f
   699  0621  3000               	movlw	0
   700  0622  07F6               	addwf	Lcd_Write_String@i+1,f
   701  0623  2E05               	goto	l757
   702  0624                     __end_of_Lcd_Write_String:	
   703                           
   704                           	psect	text2
   705  0624                     __ptext2:	
   706 ;; *************** function _Lcd_Write_Char *****************
   707 ;; Defined at:
   708 ;;		line 81 in file "lcd.h"
   709 ;; Parameters:    Size  Location     Type
   710 ;;  a               1    wreg     unsigned char 
   711 ;; Auto vars:     Size  Location     Type
   712 ;;  a               1    4[COMMON] unsigned char 
   713 ;;  y               1    3[COMMON] unsigned char 
   714 ;;  temp            1    2[COMMON] unsigned char 
   715 ;; Return value:  Size  Location     Type
   716 ;;                  1    wreg      void 
   717 ;; Registers used:
   718 ;;		wreg, status,2, status,0, pclath, cstack
   719 ;; Tracked objects:
   720 ;;		On entry : 0/0
   721 ;;		On exit  : 0/0
   722 ;;		Unchanged: 0/0
   723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   724 ;;      Params:         0       0       0       0       0
   725 ;;      Locals:         3       0       0       0       0
   726 ;;      Temps:          1       0       0       0       0
   727 ;;      Totals:         4       0       0       0       0
   728 ;;Total ram usage:        4 bytes
   729 ;; Hardware stack levels used:    1
   730 ;; Hardware stack levels required when called:    1
   731 ;; This function calls:
   732 ;;		_Lcd_Port
   733 ;; This function is called by:
   734 ;;		_Lcd_Write_String
   735 ;;		_main
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739                           
   740                           ;psect for function _Lcd_Write_Char
   741  0624                     _Lcd_Write_Char:	
   742                           
   743                           ;incstack = 0
   744                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   745                           ;Lcd_Write_Char@a stored from wreg
   746  0624  00F4               	movwf	Lcd_Write_Char@a
   747                           
   748                           ;lcd.h: 83: char temp,y;
   749                           ;lcd.h: 84: temp = a&0x0F;
   750  0625  0874               	movf	Lcd_Write_Char@a,w
   751  0626  390F               	andlw	15
   752  0627  00F1               	movwf	??_Lcd_Write_Char
   753  0628  0871               	movf	??_Lcd_Write_Char,w
   754  0629  00F2               	movwf	Lcd_Write_Char@temp
   755                           
   756                           ;lcd.h: 85: y = a&0xF0;
   757  062A  0874               	movf	Lcd_Write_Char@a,w
   758  062B  39F0               	andlw	240
   759  062C  00F1               	movwf	??_Lcd_Write_Char
   760  062D  0871               	movf	??_Lcd_Write_Char,w
   761  062E  00F3               	movwf	Lcd_Write_Char@y
   762                           
   763                           ;lcd.h: 86: RD2 = 1;
   764  062F  1283               	bcf	3,5	;RP0=0, select bank0
   765  0630  1303               	bcf	3,6	;RP1=0, select bank0
   766  0631  1508               	bsf	8,2	;volatile
   767                           
   768                           ;lcd.h: 87: Lcd_Port(y>>4);
   769  0632  0873               	movf	Lcd_Write_Char@y,w
   770  0633  00F1               	movwf	??_Lcd_Write_Char
   771  0634  3004               	movlw	4
   772  0635                     u195:	
   773  0635  1003               	clrc
   774  0636  0CF1               	rrf	??_Lcd_Write_Char,f
   775  0637  3EFF               	addlw	-1
   776  0638  1D03               	skipz
   777  0639  2E35               	goto	u195
   778  063A  0871               	movf	??_Lcd_Write_Char,w
   779  063B  120A  118A  25CE  120A  118A  	fcall	_Lcd_Port
   780                           
   781                           ;lcd.h: 88: RD3 = 1;
   782  0640  1283               	bcf	3,5	;RP0=0, select bank0
   783  0641  1303               	bcf	3,6	;RP1=0, select bank0
   784  0642  1588               	bsf	8,3	;volatile
   785                           
   786                           ;lcd.h: 89: _delay((unsigned long)((40)*(8000000/4000000.0)));
   787  0643  301A               	movlw	26
   788  0644  00F1               	movwf	??_Lcd_Write_Char
   789  0645                     u347:	
   790  0645  0BF1               	decfsz	??_Lcd_Write_Char,f
   791  0646  2E45               	goto	u347
   792  0647  0000               	nop
   793                           
   794                           ;lcd.h: 90: RD3 = 0;
   795  0648  1283               	bcf	3,5	;RP0=0, select bank0
   796  0649  1303               	bcf	3,6	;RP1=0, select bank0
   797  064A  1188               	bcf	8,3	;volatile
   798                           
   799                           ;lcd.h: 91: Lcd_Port(temp);
   800  064B  0872               	movf	Lcd_Write_Char@temp,w
   801  064C  120A  118A  25CE  120A  118A  	fcall	_Lcd_Port
   802                           
   803                           ;lcd.h: 92: RD3 = 1;
   804  0651  1283               	bcf	3,5	;RP0=0, select bank0
   805  0652  1303               	bcf	3,6	;RP1=0, select bank0
   806  0653  1588               	bsf	8,3	;volatile
   807                           
   808                           ;lcd.h: 93: _delay((unsigned long)((40)*(8000000/4000000.0)));
   809  0654  301A               	movlw	26
   810  0655  00F1               	movwf	??_Lcd_Write_Char
   811  0656                     u357:	
   812  0656  0BF1               	decfsz	??_Lcd_Write_Char,f
   813  0657  2E56               	goto	u357
   814  0658  0000               	nop
   815                           
   816                           ;lcd.h: 94: RD3 = 0;
   817  0659  1283               	bcf	3,5	;RP0=0, select bank0
   818  065A  1303               	bcf	3,6	;RP1=0, select bank0
   819  065B  1188               	bcf	8,3	;volatile
   820  065C  0008               	return
   821  065D                     __end_of_Lcd_Write_Char:	
   822                           
   823                           	psect	text3
   824  05C3                     __ptext3:	
   825 ;; *************** function _Lcd_Shift_Right *****************
   826 ;; Defined at:
   827 ;;		line 104 in file "lcd.h"
   828 ;; Parameters:    Size  Location     Type
   829 ;;		None
   830 ;; Auto vars:     Size  Location     Type
   831 ;;		None
   832 ;; Return value:  Size  Location     Type
   833 ;;                  1    wreg      void 
   834 ;; Registers used:
   835 ;;		wreg, status,2, status,0, pclath, cstack
   836 ;; Tracked objects:
   837 ;;		On entry : 0/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   841 ;;      Params:         0       0       0       0       0
   842 ;;      Locals:         0       0       0       0       0
   843 ;;      Temps:          0       0       0       0       0
   844 ;;      Totals:         0       0       0       0       0
   845 ;;Total ram usage:        0 bytes
   846 ;; Hardware stack levels used:    1
   847 ;; Hardware stack levels required when called:    2
   848 ;; This function calls:
   849 ;;		_Lcd_Cmd
   850 ;; This function is called by:
   851 ;;		_main
   852 ;; This function uses a non-reentrant model
   853 ;;
   854                           
   855                           
   856                           ;psect for function _Lcd_Shift_Right
   857  05C3                     _Lcd_Shift_Right:	
   858                           
   859                           ;lcd.h: 106: Lcd_Cmd(0x01);
   860                           
   861                           ;incstack = 0
   862                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
   863  05C3  3001               	movlw	1
   864  05C4  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
   865                           
   866                           ;lcd.h: 107: Lcd_Cmd(0x0C);
   867  05C9  300C               	movlw	12
   868  05CA  120A  118A  25E8   	fcall	_Lcd_Cmd
   869  05CD  0008               	return
   870  05CE                     __end_of_Lcd_Shift_Right:	
   871                           
   872                           	psect	text4
   873  05B8                     __ptext4:	
   874 ;; *************** function _Lcd_Shift_Left *****************
   875 ;; Defined at:
   876 ;;		line 110 in file "lcd.h"
   877 ;; Parameters:    Size  Location     Type
   878 ;;		None
   879 ;; Auto vars:     Size  Location     Type
   880 ;;		None
   881 ;; Return value:  Size  Location     Type
   882 ;;                  1    wreg      void 
   883 ;; Registers used:
   884 ;;		wreg, status,2, status,0, pclath, cstack
   885 ;; Tracked objects:
   886 ;;		On entry : 0/0
   887 ;;		On exit  : 0/0
   888 ;;		Unchanged: 0/0
   889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   890 ;;      Params:         0       0       0       0       0
   891 ;;      Locals:         0       0       0       0       0
   892 ;;      Temps:          0       0       0       0       0
   893 ;;      Totals:         0       0       0       0       0
   894 ;;Total ram usage:        0 bytes
   895 ;; Hardware stack levels used:    1
   896 ;; Hardware stack levels required when called:    2
   897 ;; This function calls:
   898 ;;		_Lcd_Cmd
   899 ;; This function is called by:
   900 ;;		_main
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904                           
   905                           ;psect for function _Lcd_Shift_Left
   906  05B8                     _Lcd_Shift_Left:	
   907                           
   908                           ;lcd.h: 112: Lcd_Cmd(0x01);
   909                           
   910                           ;incstack = 0
   911                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
   912  05B8  3001               	movlw	1
   913  05B9  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
   914                           
   915                           ;lcd.h: 113: Lcd_Cmd(0x08);
   916  05BE  3008               	movlw	8
   917  05BF  120A  118A  25E8   	fcall	_Lcd_Cmd
   918  05C2  0008               	return
   919  05C3                     __end_of_Lcd_Shift_Left:	
   920                           
   921                           	psect	text5
   922  065D                     __ptext5:	
   923 ;; *************** function _Lcd_Set_Cursor *****************
   924 ;; Defined at:
   925 ;;		line 41 in file "lcd.h"
   926 ;; Parameters:    Size  Location     Type
   927 ;;  a               1    wreg     unsigned char 
   928 ;;  b               1    4[COMMON] unsigned char 
   929 ;; Auto vars:     Size  Location     Type
   930 ;;  a               1    7[COMMON] unsigned char 
   931 ;;  temp            1   10[COMMON] unsigned char 
   932 ;;  y               1    9[COMMON] unsigned char 
   933 ;;  z               1    8[COMMON] unsigned char 
   934 ;; Return value:  Size  Location     Type
   935 ;;                  1    wreg      void 
   936 ;; Registers used:
   937 ;;		wreg, status,2, status,0, pclath, cstack
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   943 ;;      Params:         1       0       0       0       0
   944 ;;      Locals:         4       0       0       0       0
   945 ;;      Temps:          2       0       0       0       0
   946 ;;      Totals:         7       0       0       0       0
   947 ;;Total ram usage:        7 bytes
   948 ;; Hardware stack levels used:    1
   949 ;; Hardware stack levels required when called:    2
   950 ;; This function calls:
   951 ;;		_Lcd_Cmd
   952 ;; This function is called by:
   953 ;;		_main
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           
   958                           ;psect for function _Lcd_Set_Cursor
   959  065D                     _Lcd_Set_Cursor:	
   960                           
   961                           ;incstack = 0
   962                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   963                           ;Lcd_Set_Cursor@a stored from wreg
   964  065D  00F7               	movwf	Lcd_Set_Cursor@a
   965                           
   966                           ;lcd.h: 43: char temp,z,y;
   967                           ;lcd.h: 44: if(a == 1)
   968  065E  0377               	decf	Lcd_Set_Cursor@a,w
   969  065F  1D03               	btfss	3,2
   970  0660  2E82               	goto	l731
   971                           
   972                           ;lcd.h: 45: {
   973                           ;lcd.h: 46: temp = 0x80 + b - 1;
   974  0661  0874               	movf	Lcd_Set_Cursor@b,w
   975  0662  3E7F               	addlw	127
   976  0663  00F5               	movwf	??_Lcd_Set_Cursor
   977  0664  0875               	movf	??_Lcd_Set_Cursor,w
   978  0665  00FA               	movwf	Lcd_Set_Cursor@temp
   979                           
   980                           ;lcd.h: 47: z = temp>>4;
   981  0666  087A               	movf	Lcd_Set_Cursor@temp,w
   982  0667  00F5               	movwf	??_Lcd_Set_Cursor
   983  0668  3004               	movlw	4
   984  0669                     u215:	
   985  0669  1003               	clrc
   986  066A  0CF5               	rrf	??_Lcd_Set_Cursor,f
   987  066B  3EFF               	addlw	-1
   988  066C  1D03               	skipz
   989  066D  2E69               	goto	u215
   990  066E  0875               	movf	??_Lcd_Set_Cursor,w
   991  066F  00F6               	movwf	??_Lcd_Set_Cursor+1
   992  0670  0876               	movf	??_Lcd_Set_Cursor+1,w
   993  0671  00F8               	movwf	Lcd_Set_Cursor@z
   994                           
   995                           ;lcd.h: 48: y = temp & 0x0F;
   996  0672  087A               	movf	Lcd_Set_Cursor@temp,w
   997  0673  390F               	andlw	15
   998  0674  00F5               	movwf	??_Lcd_Set_Cursor
   999  0675  0875               	movf	??_Lcd_Set_Cursor,w
  1000  0676  00F9               	movwf	Lcd_Set_Cursor@y
  1001                           
  1002                           ;lcd.h: 49: Lcd_Cmd(z);
  1003  0677  0878               	movf	Lcd_Set_Cursor@z,w
  1004  0678  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
  1005                           
  1006                           ;lcd.h: 50: Lcd_Cmd(y);
  1007  067D  0879               	movf	Lcd_Set_Cursor@y,w
  1008  067E  120A  118A  25E8   	fcall	_Lcd_Cmd
  1009                           
  1010                           ;lcd.h: 51: }
  1011  0681  0008               	return
  1012  0682                     l731:	
  1013                           
  1014                           ;lcd.h: 52: else if(a == 2)
  1015  0682  3002               	movlw	2
  1016  0683  0677               	xorwf	Lcd_Set_Cursor@a,w
  1017  0684  1D03               	btfss	3,2
  1018  0685  0008               	return
  1019                           
  1020                           ;lcd.h: 53: {
  1021                           ;lcd.h: 54: temp = 0xC0 + b - 1;
  1022  0686  0874               	movf	Lcd_Set_Cursor@b,w
  1023  0687  3EBF               	addlw	191
  1024  0688  00F5               	movwf	??_Lcd_Set_Cursor
  1025  0689  0875               	movf	??_Lcd_Set_Cursor,w
  1026  068A  00FA               	movwf	Lcd_Set_Cursor@temp
  1027                           
  1028                           ;lcd.h: 55: z = temp>>4;
  1029  068B  087A               	movf	Lcd_Set_Cursor@temp,w
  1030  068C  00F5               	movwf	??_Lcd_Set_Cursor
  1031  068D  3004               	movlw	4
  1032  068E                     u235:	
  1033  068E  1003               	clrc
  1034  068F  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1035  0690  3EFF               	addlw	-1
  1036  0691  1D03               	skipz
  1037  0692  2E8E               	goto	u235
  1038  0693  0875               	movf	??_Lcd_Set_Cursor,w
  1039  0694  00F6               	movwf	??_Lcd_Set_Cursor+1
  1040  0695  0876               	movf	??_Lcd_Set_Cursor+1,w
  1041  0696  00F8               	movwf	Lcd_Set_Cursor@z
  1042                           
  1043                           ;lcd.h: 56: y = temp & 0x0F;
  1044  0697  087A               	movf	Lcd_Set_Cursor@temp,w
  1045  0698  390F               	andlw	15
  1046  0699  00F5               	movwf	??_Lcd_Set_Cursor
  1047  069A  0875               	movf	??_Lcd_Set_Cursor,w
  1048  069B  00F9               	movwf	Lcd_Set_Cursor@y
  1049                           
  1050                           ;lcd.h: 57: Lcd_Cmd(z);
  1051  069C  0878               	movf	Lcd_Set_Cursor@z,w
  1052  069D  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
  1053                           
  1054                           ;lcd.h: 58: Lcd_Cmd(y);
  1055  06A2  0879               	movf	Lcd_Set_Cursor@y,w
  1056  06A3  120A  118A  25E8   	fcall	_Lcd_Cmd
  1057  06A6  0008               	return
  1058  06A7                     __end_of_Lcd_Set_Cursor:	
  1059                           
  1060                           	psect	text6
  1061  06A7                     __ptext6:	
  1062 ;; *************** function _Lcd_Init *****************
  1063 ;; Defined at:
  1064 ;;		line 62 in file "lcd.h"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;		None
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;		None
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  1    wreg      void 
  1071 ;; Registers used:
  1072 ;;		wreg, status,2, status,0, pclath, cstack
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1078 ;;      Params:         0       0       0       0       0
  1079 ;;      Locals:         0       0       0       0       0
  1080 ;;      Temps:          2       0       0       0       0
  1081 ;;      Totals:         2       0       0       0       0
  1082 ;;Total ram usage:        2 bytes
  1083 ;; Hardware stack levels used:    1
  1084 ;; Hardware stack levels required when called:    2
  1085 ;; This function calls:
  1086 ;;		_Lcd_Cmd
  1087 ;;		_Lcd_Port
  1088 ;; This function is called by:
  1089 ;;		_main
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           
  1094                           ;psect for function _Lcd_Init
  1095  06A7                     _Lcd_Init:	
  1096                           
  1097                           ;lcd.h: 64: Lcd_Port(0x00);
  1098                           
  1099                           ;incstack = 0
  1100                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1101  06A7  3000               	movlw	0
  1102  06A8  120A  118A  25CE  120A  118A  	fcall	_Lcd_Port
  1103                           
  1104                           ;lcd.h: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
  1105  06AD  3034               	movlw	52
  1106  06AE  00F5               	movwf	??_Lcd_Init+1
  1107  06AF  30F1               	movlw	241
  1108  06B0  00F4               	movwf	??_Lcd_Init
  1109  06B1                     u367:	
  1110  06B1  0BF4               	decfsz	??_Lcd_Init,f
  1111  06B2  2EB1               	goto	u367
  1112  06B3  0BF5               	decfsz	??_Lcd_Init+1,f
  1113  06B4  2EB1               	goto	u367
  1114  06B5  2EB6               	nop2
  1115                           
  1116                           ;lcd.h: 66: Lcd_Cmd(0x03);
  1117  06B6  3003               	movlw	3
  1118  06B7  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
  1119                           
  1120                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  1121  06BC  300D               	movlw	13
  1122  06BD  00F5               	movwf	??_Lcd_Init+1
  1123  06BE  30FB               	movlw	251
  1124  06BF  00F4               	movwf	??_Lcd_Init
  1125  06C0                     u377:	
  1126  06C0  0BF4               	decfsz	??_Lcd_Init,f
  1127  06C1  2EC0               	goto	u377
  1128  06C2  0BF5               	decfsz	??_Lcd_Init+1,f
  1129  06C3  2EC0               	goto	u377
  1130  06C4  2EC5               	nop2
  1131                           
  1132                           ;lcd.h: 68: Lcd_Cmd(0x03);
  1133  06C5  3003               	movlw	3
  1134  06C6  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
  1135                           
  1136                           ;lcd.h: 69: _delay((unsigned long)((11)*(8000000/4000.0)));
  1137  06CB  301D               	movlw	29
  1138  06CC  00F5               	movwf	??_Lcd_Init+1
  1139  06CD  3091               	movlw	145
  1140  06CE  00F4               	movwf	??_Lcd_Init
  1141  06CF                     u387:	
  1142  06CF  0BF4               	decfsz	??_Lcd_Init,f
  1143  06D0  2ECF               	goto	u387
  1144  06D1  0BF5               	decfsz	??_Lcd_Init+1,f
  1145  06D2  2ECF               	goto	u387
  1146                           
  1147                           ;lcd.h: 70: Lcd_Cmd(0x03);
  1148  06D3  3003               	movlw	3
  1149  06D4  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
  1150                           
  1151                           ;lcd.h: 72: Lcd_Cmd(0x02);
  1152  06D9  3002               	movlw	2
  1153  06DA  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
  1154                           
  1155                           ;lcd.h: 73: Lcd_Cmd(0x02);
  1156  06DF  3002               	movlw	2
  1157  06E0  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
  1158                           
  1159                           ;lcd.h: 74: Lcd_Cmd(0x08);
  1160  06E5  3008               	movlw	8
  1161  06E6  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
  1162                           
  1163                           ;lcd.h: 75: Lcd_Cmd(0x00);
  1164  06EB  3000               	movlw	0
  1165  06EC  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
  1166                           
  1167                           ;lcd.h: 76: Lcd_Cmd(0x0C);
  1168  06F1  300C               	movlw	12
  1169  06F2  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
  1170                           
  1171                           ;lcd.h: 77: Lcd_Cmd(0x00);
  1172  06F7  3000               	movlw	0
  1173  06F8  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
  1174                           
  1175                           ;lcd.h: 78: Lcd_Cmd(0x06);
  1176  06FD  3006               	movlw	6
  1177  06FE  120A  118A  25E8   	fcall	_Lcd_Cmd
  1178  0701  0008               	return
  1179  0702                     __end_of_Lcd_Init:	
  1180                           
  1181                           	psect	text7
  1182  05AD                     __ptext7:	
  1183 ;; *************** function _Lcd_Clear *****************
  1184 ;; Defined at:
  1185 ;;		line 35 in file "lcd.h"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;		None
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;		None
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  2   32[None  ] int 
  1192 ;; Registers used:
  1193 ;;		wreg, status,2, status,0, pclath, cstack
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1199 ;;      Params:         0       0       0       0       0
  1200 ;;      Locals:         0       0       0       0       0
  1201 ;;      Temps:          0       0       0       0       0
  1202 ;;      Totals:         0       0       0       0       0
  1203 ;;Total ram usage:        0 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; Hardware stack levels required when called:    2
  1206 ;; This function calls:
  1207 ;;		_Lcd_Cmd
  1208 ;; This function is called by:
  1209 ;;		_main
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           
  1214                           ;psect for function _Lcd_Clear
  1215  05AD                     _Lcd_Clear:	
  1216                           
  1217                           ;lcd.h: 37: Lcd_Cmd(0);
  1218                           
  1219                           ;incstack = 0
  1220                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1221  05AD  3000               	movlw	0
  1222  05AE  120A  118A  25E8  120A  118A  	fcall	_Lcd_Cmd
  1223                           
  1224                           ;lcd.h: 38: Lcd_Cmd(1);
  1225  05B3  3001               	movlw	1
  1226  05B4  120A  118A  25E8   	fcall	_Lcd_Cmd
  1227  05B7  0008               	return
  1228  05B8                     __end_of_Lcd_Clear:	
  1229                           
  1230                           	psect	text8
  1231  05E8                     __ptext8:	
  1232 ;; *************** function _Lcd_Cmd *****************
  1233 ;; Defined at:
  1234 ;;		line 26 in file "lcd.h"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;  a               1    wreg     unsigned char 
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;  a               1    3[COMMON] unsigned char 
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, status,2, status,0, pclath, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1248 ;;      Params:         0       0       0       0       0
  1249 ;;      Locals:         1       0       0       0       0
  1250 ;;      Temps:          2       0       0       0       0
  1251 ;;      Totals:         3       0       0       0       0
  1252 ;;Total ram usage:        3 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    1
  1255 ;; This function calls:
  1256 ;;		_Lcd_Port
  1257 ;; This function is called by:
  1258 ;;		_Lcd_Clear
  1259 ;;		_Lcd_Set_Cursor
  1260 ;;		_Lcd_Init
  1261 ;;		_Lcd_Shift_Right
  1262 ;;		_Lcd_Shift_Left
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266                           
  1267                           ;psect for function _Lcd_Cmd
  1268  05E8                     _Lcd_Cmd:	
  1269                           
  1270                           ;incstack = 0
  1271                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1272                           ;Lcd_Cmd@a stored from wreg
  1273  05E8  00F3               	movwf	Lcd_Cmd@a
  1274                           
  1275                           ;lcd.h: 28: RD2 = 0;
  1276  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  1277  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  1278  05EB  1108               	bcf	8,2	;volatile
  1279                           
  1280                           ;lcd.h: 29: Lcd_Port(a);
  1281  05EC  0873               	movf	Lcd_Cmd@a,w
  1282  05ED  120A  118A  25CE  120A  118A  	fcall	_Lcd_Port
  1283                           
  1284                           ;lcd.h: 30: RD3 = 1;
  1285  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  1286  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  1287  05F4  1588               	bsf	8,3	;volatile
  1288                           
  1289                           ;lcd.h: 31: _delay((unsigned long)((4)*(8000000/4000.0)));
  1290  05F5  300B               	movlw	11
  1291  05F6  00F2               	movwf	??_Lcd_Cmd+1
  1292  05F7  3062               	movlw	98
  1293  05F8  00F1               	movwf	??_Lcd_Cmd
  1294  05F9                     u397:	
  1295  05F9  0BF1               	decfsz	??_Lcd_Cmd,f
  1296  05FA  2DF9               	goto	u397
  1297  05FB  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1298  05FC  2DF9               	goto	u397
  1299  05FD  0000               	nop
  1300                           
  1301                           ;lcd.h: 32: RD3 = 0;
  1302  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  1303  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  1304  0600  1188               	bcf	8,3	;volatile
  1305  0601  0008               	return
  1306  0602                     __end_of_Lcd_Cmd:	
  1307                           
  1308                           	psect	text9
  1309  05CE                     __ptext9:	
  1310 ;; *************** function _Lcd_Port *****************
  1311 ;; Defined at:
  1312 ;;		line 4 in file "lcd.h"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;  a               1    wreg     unsigned char 
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  a               1    0[COMMON] unsigned char 
  1317 ;; Return value:  Size  Location     Type
  1318 ;;                  1    wreg      void 
  1319 ;; Registers used:
  1320 ;;		wreg
  1321 ;; Tracked objects:
  1322 ;;		On entry : 0/0
  1323 ;;		On exit  : 0/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1326 ;;      Params:         0       0       0       0       0
  1327 ;;      Locals:         1       0       0       0       0
  1328 ;;      Temps:          0       0       0       0       0
  1329 ;;      Totals:         1       0       0       0       0
  1330 ;;Total ram usage:        1 bytes
  1331 ;; Hardware stack levels used:    1
  1332 ;; This function calls:
  1333 ;;		Nothing
  1334 ;; This function is called by:
  1335 ;;		_Lcd_Cmd
  1336 ;;		_Lcd_Init
  1337 ;;		_Lcd_Write_Char
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           
  1342                           ;psect for function _Lcd_Port
  1343  05CE                     _Lcd_Port:	
  1344                           
  1345                           ;incstack = 0
  1346                           ; Regs used in _Lcd_Port: [wreg]
  1347                           ;Lcd_Port@a stored from wreg
  1348  05CE  00F0               	movwf	Lcd_Port@a
  1349                           
  1350                           ;lcd.h: 6: if(a & 1)
  1351  05CF  1C70               	btfss	Lcd_Port@a,0
  1352  05D0  2DD5               	goto	l19
  1353                           
  1354                           ;lcd.h: 7: RD4 = 1;
  1355  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  1356  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  1357  05D3  1608               	bsf	8,4	;volatile
  1358  05D4  2DD8               	goto	l20
  1359  05D5                     l19:	
  1360                           
  1361                           ;lcd.h: 8: else
  1362                           ;lcd.h: 9: RD4 = 0;
  1363  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  1364  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  1365  05D7  1208               	bcf	8,4	;volatile
  1366  05D8                     l20:	
  1367                           
  1368                           ;lcd.h: 11: if(a & 2)
  1369  05D8  1CF0               	btfss	Lcd_Port@a,1
  1370  05D9  2DDC               	goto	l21
  1371                           
  1372                           ;lcd.h: 12: RD5 = 1;
  1373  05DA  1688               	bsf	8,5	;volatile
  1374  05DB  2DDD               	goto	l22
  1375  05DC                     l21:	
  1376                           
  1377                           ;lcd.h: 13: else
  1378                           ;lcd.h: 14: RD5 = 0;
  1379  05DC  1288               	bcf	8,5	;volatile
  1380  05DD                     l22:	
  1381                           
  1382                           ;lcd.h: 16: if(a & 4)
  1383  05DD  1D70               	btfss	Lcd_Port@a,2
  1384  05DE  2DE1               	goto	l23
  1385                           
  1386                           ;lcd.h: 17: RD6 = 1;
  1387  05DF  1708               	bsf	8,6	;volatile
  1388  05E0  2DE2               	goto	l24
  1389  05E1                     l23:	
  1390                           
  1391                           ;lcd.h: 18: else
  1392                           ;lcd.h: 19: RD6 = 0;
  1393  05E1  1308               	bcf	8,6	;volatile
  1394  05E2                     l24:	
  1395                           
  1396                           ;lcd.h: 21: if(a & 8)
  1397  05E2  1DF0               	btfss	Lcd_Port@a,3
  1398  05E3  2DE6               	goto	l25
  1399                           
  1400                           ;lcd.h: 22: RD7 = 1;
  1401  05E4  1788               	bsf	8,7	;volatile
  1402  05E5  0008               	return
  1403  05E6                     l25:	
  1404                           
  1405                           ;lcd.h: 23: else
  1406                           ;lcd.h: 24: RD7 = 0;
  1407  05E6  1388               	bcf	8,7	;volatile
  1408  05E7  0008               	return
  1409  05E8                     __end_of_Lcd_Port:	
  1410  007E                     btemp	set	126	;btemp
  1411  007E                     wtemp0	set	126


Data Sizes:
    Strings     64
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      2       2
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 17
		 -> STR_5(CODE[16]), STR_4(CODE[3]), STR_3(CODE[16]), STR_2(CODE[17]), 
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1899
                                             11 COMMON     3     3      0
                                              0 BANK0      2     2      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     403
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     698
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      2       2       5        2.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Wed Sep 27 21:49:24 2017

                        pc 0002                __CFG_CP$OFF 0000                         l20 05D8  
                       l21 05DC                         l22 05DD                         l23 05E1  
                       l24 05E2                         l25 05E6                         l19 05D5  
                       fsr 0004                        l731 0682                        l811 07A5  
                      l803 0784                        l825 07CF                        l817 07AE  
                      l757 0605                        l767 070A                        _RD2 0042  
                      _RD3 0043                        _RD4 0044                        _RD5 0045  
                      _RD6 0046                        _RD7 0047                        u215 0669  
                      u235 068E                        u307 075F                        u317 078A  
                      u327 07B4                        u337 07F4               __CFG_CPD$OFF 0000  
                      u347 0645                        u195 0635                        u357 0656  
                      u367 06B1                        u377 06C0                        u297 0731  
                      u387 06CF                        u397 05F9                        fsr0 0004  
             __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000                       STR_1 003A  
                     STR_2 0009                       STR_3 002A                       STR_4 0027  
                     STR_5 001A               __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0070  
                     _main 0702                       btemp 007E              __CFG_BOREN$ON 0000  
                     start 0000         ??_Lcd_Write_String 0075            __end_of_Lcd_Cmd 0602  
                    ?_main 0070              __CFG_WDTE$OFF 0000    __size_of_Lcd_Set_Cursor 004A  
                    _TRISD 0088    __size_of_Lcd_Shift_Left 000B                      main@a 0020  
                    pclath 000A                      status 0003                      wtemp0 007E  
         __end_of_Lcd_Init 0702           __end_of_Lcd_Port 05E8            __initialization 07FC  
             __end_of_main 07FC                     ??_main 007B         __size_of_Lcd_Clear 000B  
                ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0039             __CFG_PWRTE$OFF 0000  
 __size_of_Lcd_Shift_Right 000B            Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074  
          Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC  
        __end_of_Lcd_Clear 05B8             __pcstackCOMMON 0070             _Lcd_Set_Cursor 065D  
           _Lcd_Shift_Left 05B8                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
               __pmaintext 0702  __size_of_Lcd_Write_String 0022     __end_of_Lcd_Set_Cursor 06A7  
   __end_of_Lcd_Shift_Left 05C3          ??_Lcd_Shift_Right 0074                 ??_Lcd_Init 0074  
               ??_Lcd_Port 0070                 __stringtab 0003             _Lcd_Write_Char 0624  
                  _Lcd_Cmd 05E8            ?_Lcd_Set_Cursor 0074                    __ptext1 0602  
                  __ptext2 0624                    __ptext3 05C3                    __ptext4 05B8  
                  __ptext5 065D                    __ptext6 06A7                    __ptext7 05AD  
                  __ptext8 05E8                    __ptext9 05CE            ?_Lcd_Shift_Left 0070  
   __end_of_Lcd_Write_Char 065D       end_of_initialization 07FC                  Lcd_Port@a 0070  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0077          Lcd_Write_String@i 0075  
                _Lcd_Clear 05AD           _Lcd_Write_String 0602        start_initialization 07FC  
        __size_of_Lcd_Init 005B          __size_of_Lcd_Port 001A                 ?_Lcd_Clear 0070  
          _Lcd_Shift_Right 05C3            Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073  
                ___latbits 0002              __pcstackBANK0 0020                   ?_Lcd_Cmd 0070  
         ??_Lcd_Set_Cursor 0075           ??_Lcd_Shift_Left 0074                  __pstrings 0003  
  __end_of_Lcd_Shift_Right 05CE                   Lcd_Cmd@a 0073                ??_Lcd_Clear 0074  
              __stringbase 0008           ??_Lcd_Write_Char 0071                   _Lcd_Init 06A7  
                 _Lcd_Port 05CE   __end_of_Lcd_Write_String 0624           __size_of_Lcd_Cmd 001A  
       __end_of__stringtab 0009              __size_of_main 00FA           ?_Lcd_Shift_Right 0070  
       Lcd_Write_Char@temp 0072                  stringcode 0003         Lcd_Set_Cursor@temp 007A  
                 stringdir 0003                   stringtab 0003  
